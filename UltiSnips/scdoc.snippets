# Snippets for writing SuperCollider help files in the SCDoc syntax with file suffixes ".schelp"
# These tags are largely based on this help file in superCollider:
# http://doc.sccode.org/Reference/SCDocSyntax.html#

############################
#  Full example help files  #
############################

snippet /te(mplate)?/ "Full example help file" rb
TITLE:: ${1:`!p snip.rv = snip.basename`}
SUMMARY:: ${2:pulse oscillator}
CATEGORIES:: ${3:UGens>Generators>Deterministic}, ${4:UGens>Oscillators}
RELATED:: ${5:Classes/LFSaw}

DESCRIPTION::
${6:A non-band-limited pulse oscillator. Outputs a high value of one and a low value of zero.}

CLASSMETHODS::

METHOD:: ${7:ar, kr}

${8:ARGUMENT::${9:freq}
${10:frequency in hertz}
}
${11:ARGUMENT::${12:width}
${13:pulse width duty cycle from zero to one.}
}
RETURNS::
${14:An UGen.}

EXAMPLES::

${15:a plot:}
CODE:: ${16:{ LFPulse.ar(Line.kr(100, 800, 0.1)) }.plot(0.1);} ::

${17:50 Hz wave:}
CODE:: ${18:{ LFPulse.ar(50) * 0.1 }.play; }::
endsnippet

snippet /tu(torial)?/ "Full example tutorial help file" rb
TITLE:: ${1:`!p snip.rv = snip.basename`}
SUMMARY:: ${2:A tutorial}
CATEGORIES:: ${3:Tutorials}, ${4:Server}
RELATED:: ${5:Tutorials/Server_Tutorial}

SECTION:: ${6:Introduction}
${7:This is the introduction to the tutorial}
${9:CODE::
// An example:
${8:SinOsc.ar(441!2)}
::}

SECTION:: ${10:Going further}

${11:This is another section.}

${13:CODE::
// An example:
${12:SinOsc.ar(441!2)}
::}

KEYWORD:: ${14:findMe}${16:,${15:andMe}}
endsnippet

#################
#  Header tags  #
#################

snippet /ti(tle)?/ "title header" br
TITLE:: ${1:`!p snip.rv = snip.basename`}
endsnippet

snippet /ca(tegories)?/ "A comma seperated list of document categories" br
CATEGORIES:: ${1:External Control>OSC}, ${2:Scheduling>Clocks}
endsnippet

snippet /re(lated)?/ "Related docs" br
RELATED:: ${1:Classes/SCDoc}, ${2:Scheduling>Clocks}
endsnippet

snippet /su(mmary)?/ "Short summary" br
SUMMARY:: ${1:SCDoc markup language syntax}
endsnippet

snippet /re(direct)?/ "For class redirect systems, specify the name of the instance variable holding the implementing class" br
REDIRECT:: ${1:implClass}
endsnippet

##################
#  Section tags  #
##################

snippet /se(ction)?/ "section header" br
SECTION:: ${1:About `!p snip.rv = snip.basename`}
endsnippet

snippet /de(scription)?/ "description" br
DESCRIPTION:: ${1:This is a description of something.}
endsnippet

snippet /cl(assmethods)?/ "Class methods section header" br
CLASSMETHODS::
endsnippet

snippet /in(stancemethods)?/ "Instance methods section header" br
INSTANCEMETHODS::
endsnippet

snippet /ex(amples)?/ "Examples header" br
EXAMPLES::
endsnippet

#####################
#  Level 2 headers  #
#####################
snippet /su(bsection)?/ "A named subsection. The name should be plain text and can not contain any tags." br
SUBSECTION:: ${1:name}
endsnippet

#################
#  Method tags  #
#################
snippet /me(thod)?/ "Document one or more methods, given as a comma sepeated list of methodnames" br
METHOD:: ${1:methodname}
endsnippet

snippet /pr(ivate)?/ "marks one or more methods as private, so that it does not show up under the auto-generated Undocumented Methods sections. Expects a comma-separated list of methodnames." br
PRIVATE::${1:methodname}
endsnippet

snippet /co(pymethod)?/ "Copy a method documentation from a class reference and insert it here as if the method was documented in this document. The methodname must be prefixed with * for classmethods and - for instancemethods." br
COPYMETHOD::${1:SinOsc} ${2:*ar}
endsnippet

snippet /ar(gument)?/ "Describe an argument in a method" br
ARGUMENT::${1:argname}
endsnippet

snippet /re(turns)?/ "Describe the return value of a method" br
RETURNS::${1:Integer}
endsnippet

snippet /di(scussion)?/ "This optional section can contain a more detailed discussion and code examples related to this method." br
DISCUSSION::
${1:method:: ar, kr
This is a nice method, try it out!
argument:: freq
The frequency of this thing as a floating point value.
argument:: amp
The amplitude, be careful. Goes to 11.
returns::
An UGen.}
endsnippet

################
#  Modal tags  #
################
# These tags enclose a text and ends with a single :: (double-colon) end-tag. The enclosed text can not contain any other tags. 

snippet /st(rong)?/ "Render text in bold font" br
STRONG::${1:Very strong text}::
endsnippet

snippet /bo(ld)?/ "Render text in bold font" br
STRONG::${1:Very strong text}::
endsnippet

snippet /em(phasis)?/ "Render text in emphasized font / italics" br
EMPHASIS::${1:This is in italics}::
endsnippet

snippet /it(alics)?/ "Render text in emphasized font / italics" br
EMPHASIS::${1:This is in italics}::
endsnippet

snippet /so(ft)?/ "Render text in a soft shade" br
SOFT::${1:Soft text}::
endsnippet

snippet /li(nk)?/ "Create link to another document" br
${2:See }LINK::#${1:Classes/SinOsc#*ar}::
endsnippet

snippet /an(chor)?/ "Link to section anchor" br
${2:See section } LINK::#${1:Introduction}:: ${3:in this document.}
endsnippet

snippet /im(age)?/ "Insert image, the text should be the relative path to the image" br
IMAGE::${1:foo.png}::
endsnippet

snippet /co(deblock)?/ "Render syntax-coloured code in block form" br
CODE::
${1:SinOsc.ar(freq:441) * LFNoise2.kr(123)}
::
endsnippet

snippet /co(de)?/ "Render syntax-coloured code inline" br
CODE::${1:SinOsc.ar(441)}::
endsnippet

snippet /co(deline)?/ "Render syntax-coloured code inline" br
CODE::${1:SinOsc.ar(441)}::
endsnippet
######################
#  Lists and tables  #
######################

snippet /ta(ble)?/ "Create a table" br
TABLE::
	${10:## ${1:a 1} || ${2:a 2} || ${3:a 3}}
	${11:## ${4:b 1} || ${5:b 2} || ${6:b 3}}
	${12:## ${7:c 1} || ${8:c 2} || ${9:c 3}}
::
endsnippet

snippet /de(finitionlist)?/ "A definition list item consists of one or more terms prefixed with ## followed by a description prefixed with ||" br
DEFINITIONLIST::
	${5:## ${1:sig}
	|| ${2:Common variable name}}
	${6:## ${3:SuperCollider}
	|| ${4:A very nice computer software.}}
::
endsnippet

snippet /li(st)?/ "A simple list" br
LIST::
	## ${1:First item on list}
	## ${2:Second item on list}
	## ${3:Third item on list}
::
endsnippet

snippet /nu(mberedlist)?/ "A simple numberedlist" br
NUMBEREDLIST::
	## ${1:First item on list}
	## ${2:Second item on list}
	## ${3:Third item on list}
::
endsnippet

# TODO:  <23-08-20, Mads Kjeldgaard> #
#snippet /tree "Create a tree structure" b
#endsnippet

########################
#  Notes and warnings  #
########################

snippet /no(te)?/ "Create a NOTE box" br
NOTE::${1:Here is something to think about}::
endsnippet

snippet /wa(rning)?/ "Create a WARNING box" br
WARNING::${1:Here is something to think about}::
endsnippet

snippet /fo(otnote)?/ "Create a footnote which" br
${1:Hello I'm a geek}FOOTNOTE::
${2:According to http://en.wikipedia.org/wiki/Geek the word geek is a slang term.
}::
endsnippet

##################
#  Other things  #
##################

snippet /ke(yword)?/ "Make this document findable by keyword" rb
KEYWORD:: ${1:findMe}${3:,${2:andMe}}
endsnippet
